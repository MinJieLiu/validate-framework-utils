{"version":3,"sources":["../src/testHook.js"],"names":["hookTest","type","field","test","isNumeric","isInteger","isDecimal","isEmail","isIp","isTel","isPhone","isAbc","isUrl","isDate","thatDate","date","split","year","parseInt","month","day","numDays","required","Array","isArray","length","value","greaterThan","param","decimal","parseFloat","lessThan","maxLength","integer","minLength","greaterThanDate","currentDate","paramDate","lessThanDate"],"mappings":"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","file":"testHook.js","sourcesContent":["import regex from './regex';\nimport {\n  getValue,\n  parseToDate,\n  isEmpty,\n} from './util';\n\n// 验证\nexport const hookTest = (type, field) => regex[type].test(getValue(field));\n\n/**\n * 验证方法\n */\nexport default {\n\n  // 自然数\n  isNumeric(field) {\n    return hookTest('numeric', field);\n  },\n\n  // 整数\n  isInteger(field) {\n    return hookTest('integer', field);\n  },\n\n  // 浮点数\n  isDecimal(field) {\n    return hookTest('decimal', field);\n  },\n\n  // 邮箱\n  isEmail(field) {\n    return hookTest('email', field);\n  },\n\n  // IP 地址\n  isIp(field) {\n    return hookTest('ip', field);\n  },\n\n  // 座机\n  isTel(field) {\n    return hookTest('tel', field);\n  },\n\n  // 手机\n  isPhone(field) {\n    return hookTest('phone', field);\n  },\n\n  // 字母数字下划线\n  isAbc(field) {\n    return hookTest('abc', field);\n  },\n\n  // URL\n  isUrl(field) {\n    return hookTest('url', field);\n  },\n\n  // 日期\n  isDate(field) {\n    // 解析日期\n    let thatDate = getValue(field);\n    if (regex.date.test(thatDate)) {\n      thatDate = thatDate.split('-');\n      const year = parseInt(thatDate[0], 10);\n      const month = parseInt(thatDate[1], 10);\n      const day = parseInt(thatDate[2], 10);\n\n      if (year < 1 || year > 9999 || month < 1 || month > 12) {\n        return false;\n      }\n\n      const numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      // 闰年 2 月 29 号\n      if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\n        numDays[1] = 29;\n      }\n\n      // 检查日期\n      return !(day < 1 || day > numDays[month - 1]);\n    }\n    return false;\n  },\n\n  // 是否为必须\n  required(field) {\n    // 检查 field 本身\n    if (isEmpty(field)) {\n      return false;\n    }\n    if (Array.isArray(field)) {\n      return !!field.length;\n    }\n    if (Array.isArray(field.value)) {\n      return !!field.value.length;\n    }\n    return !isEmpty(getValue(field));\n  },\n\n  // 大于某个数\n  greaterThan(field, param) {\n    const value = getValue(field);\n    if (!regex.decimal.test(value)) {\n      return false;\n    }\n    return (parseFloat(value) > parseFloat(param));\n  },\n\n  // 小于某个数\n  lessThan(field, param) {\n    const value = getValue(field);\n    if (!regex.decimal.test(value)) {\n      return false;\n    }\n    return (parseFloat(value) < parseFloat(param));\n  },\n\n  // 最大长度\n  maxLength(field, length) {\n    if (!regex.integer.test(length)) {\n      return false;\n    }\n    return (getValue(field).length <= parseInt(length, 10));\n  },\n\n  // 最小长度\n  minLength(field, length) {\n    if (!regex.integer.test(length)) {\n      return false;\n    }\n    return (getValue(field).length >= parseInt(length, 10));\n  },\n\n  // 大于某个日期\n  greaterThanDate(field, date) {\n    const currentDate = parseToDate(getValue(field));\n    const paramDate = parseToDate(date);\n\n    if (!(paramDate && currentDate)) {\n      return false;\n    }\n    return currentDate > paramDate;\n  },\n\n  // 小于某个日期\n  lessThanDate(field, date) {\n    const currentDate = parseToDate(getValue(field));\n    const paramDate = parseToDate(date);\n\n    if (!(paramDate && currentDate)) {\n      return false;\n    }\n    return currentDate < paramDate;\n  },\n\n};\n"]}