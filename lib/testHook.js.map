{"version":3,"sources":["../src/testHook.js"],"names":["isNumeric","field","numeric","test","isInteger","integer","isDecimal","decimal","isEmail","email","isIp","ip","isTel","tel","isPhone","phone","isAbc","abc","isUrl","url","isDate","thatDate","date","split","year","parseInt","month","day","numDays","required","Array","isArray","value","length","greaterThan","param","parseFloat","lessThan","maxLength","minLength","greaterThanDate","currentDate","paramDate","lessThanDate"],"mappings":"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","file":"testHook.js","sourcesContent":["import regex from './regex';\nimport {\n  getValue,\n  parseToDate,\n} from './util';\n\n/**\n * 验证方法\n */\nexport default {\n\n  // 自然数\n  isNumeric(field) {\n    return regex.numeric.test(getValue(field));\n  },\n\n  // 整数\n  isInteger(field) {\n    return regex.integer.test(getValue(field));\n  },\n\n  // 浮点数\n  isDecimal(field) {\n    return regex.decimal.test(getValue(field));\n  },\n\n  // 邮箱\n  isEmail(field) {\n    return regex.email.test(getValue(field));\n  },\n\n  // IP 地址\n  isIp(field) {\n    return regex.ip.test(getValue(field));\n  },\n\n  // 座机\n  isTel(field) {\n    return regex.tel.test(getValue(field));\n  },\n\n  // 手机\n  isPhone(field) {\n    return regex.phone.test(getValue(field));\n  },\n\n  // 字母数字下划线\n  isAbc(field) {\n    return regex.abc.test(getValue(field));\n  },\n\n  // URL\n  isUrl(field) {\n    return regex.url.test(getValue(field));\n  },\n\n  // 日期\n  isDate(field) {\n    // 解析日期\n    let thatDate = getValue(field);\n    if (regex.date.test(thatDate)) {\n      thatDate = thatDate.split('-');\n      const year = parseInt(thatDate[0], 10);\n      const month = parseInt(thatDate[1], 10);\n      const day = parseInt(thatDate[2], 10);\n\n      if (year < 1 || year > 9999 || month < 1 || month > 12) {\n        return false;\n      }\n\n      const numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      // 闰年 2 月 29 号\n      if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\n        numDays[1] = 29;\n      }\n\n      // 检查日期\n      return !(day < 1 || day > numDays[month - 1]);\n    }\n    return false;\n  },\n\n  // 是否为必须\n  required(field) {\n    if (typeof field === 'string') {\n      return field !== '';\n    } else if (Array.isArray(field.value)) {\n      return field.value.length;\n    }\n    return field.value !== null && field.value !== '';\n  },\n\n  // 大于某个数\n  greaterThan(field, param) {\n    const value = getValue(field);\n    if (!regex.decimal.test(value)) {\n      return false;\n    }\n    return (parseFloat(value) > parseFloat(param));\n  },\n\n  // 小于某个数\n  lessThan(field, param) {\n    const value = getValue(field);\n    if (!regex.decimal.test(value)) {\n      return false;\n    }\n    return (parseFloat(value) < parseFloat(param));\n  },\n\n  // 最大长度\n  maxLength(field, length) {\n    if (!regex.integer.test(length)) {\n      return false;\n    }\n    return (getValue(field).length <= parseInt(length, 10));\n  },\n\n  // 最小长度\n  minLength(field, length) {\n    if (!regex.integer.test(length)) {\n      return false;\n    }\n    return (getValue(field).length >= parseInt(length, 10));\n  },\n\n  // 大于某个日期\n  greaterThanDate(field, date) {\n    const currentDate = parseToDate(getValue(field));\n    const paramDate = parseToDate(date);\n\n    if (!(paramDate && currentDate)) {\n      return false;\n    }\n    return currentDate > paramDate;\n  },\n\n  // 小于某个日期\n  lessThanDate(field, date) {\n    const currentDate = parseToDate(getValue(field));\n    const paramDate = parseToDate(date);\n\n    if (!(paramDate && currentDate)) {\n      return false;\n    }\n    return currentDate < paramDate;\n  },\n\n};\n"]}