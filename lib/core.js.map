{"version":3,"sources":["../src/core.js"],"names":["field","result","error","isRequired","rules","includes","isEmpty","value","undefined","split","forEach","rule","index","parts","exec","method","param","jumpRule","apply","id","name","message","seqText","messages","replace"],"mappings":";;;;;;kBAKe,UAAUA,KAAV,EAAiB;AAAA;;AAC9B;AACA,MAAIC,SAAS,IAAb;AACA,MAAIC,QAAQ,IAAZ;;AAEA,MAAMC,aAAaH,MAAMI,KAAN,CAAYC,QAAZ,CAAqB,UAArB,CAAnB;AACA,MAAMC,UAAUN,MAAMO,KAAN,KAAgBC,SAAhB,IAA6BR,MAAMO,KAAN,KAAgB,IAA7C,IAAqDP,MAAMO,KAAN,KAAgB,EAArF;;AAEA,MAAMH,QAAQJ,MAAMI,KAAN,CAAYK,KAAZ,CAAkB,WAAlB,CAAd;;AAEAL,QAAMM,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC7B;AACA,QAAI,CAACX,MAAL,EAAa;AACX;AACD;;AAED;AACA,QAAMY,QAAQ,kBAAkBC,IAAlB,CAAuBH,IAAvB,CAAd;AACA,QAAII,SAASJ,IAAb;AACA,QAAIK,QAAQ,EAAZ;;AAEA;AACA,QAAIH,KAAJ,EAAW;AACTE,eAASF,MAAM,CAAN,CAAT;AACAG,cAAQH,MAAM,CAAN,CAAR;AACD;;AAED;AACA,QAAMI,WAAW,CAACd,UAAD,IAAeG,OAAhC;;AAEA;AACA,QAAI,OAAO,MAAKS,MAAL,CAAP,KAAwB,UAAxB,IAAsC,CAACE,QAA3C,EAAqD;AACnD,UAAI,CAAC,MAAKF,MAAL,EAAaG,KAAb,QAAyB,CAAClB,KAAD,EAAQgB,KAAR,CAAzB,CAAL,EAA+C;AAC7Cf,iBAAS,KAAT;AACD;AACF;;AAED;AACAC,YAAQ;AACNiB,UAAInB,MAAMmB,EADJ;AAENC,YAAMpB,MAAMoB,IAFN;AAGNb,aAAOP,MAAMO,KAHP;AAINI,YAAMI;AAJA,KAAR;;AAOA;AACA,QAAI,CAACd,MAAL,EAAa;AACX;AACAC,YAAMmB,OAAN,GAAiB,YAAM;AACrB,YAAMC,UAAUtB,MAAMuB,QAAN,GAAiBvB,MAAMuB,QAAN,CAAed,KAAf,CAAqB,WAArB,EAAkCG,KAAlC,CAAjB,GAA4D,EAA5E;;AAEA;AACA,eAAOU,UACHA,QAAQE,OAAR,CAAgB,oBAAhB,EAAsCxB,MAAMO,KAA5C,EAAmDiB,OAAnD,CAA2D,oBAA3D,EAAiFR,KAAjF,CADG,GAEHM,OAFJ;AAGD,OAPe,EAAhB;AAQD;AACF,GA/CD;;AAiDA,SAAO;AACLrB,kBADK;AAELC;AAFK,GAAP;AAID,C","file":"core.js","sourcesContent":["/**\n * 通过 field 验证\n * @param  {Object} field 验证信息域\n * @return {Object} 包含结果、错误信息\n */\nexport default function (field) {\n  // 成功标识\n  let result = true;\n  let error = null;\n\n  const isRequired = field.rules.includes('required');\n  const isEmpty = field.value === undefined || field.value === null || field.value === '';\n\n  const rules = field.rules.split(/\\s*\\|\\s*/g);\n\n  rules.forEach((rule, index) => {\n    // 逐条验证，如果已经验证失败，则不需要进入当前条目再次验证\n    if (!result) {\n      return;\n    }\n\n    // 转换如：maxLength(12) => ['maxLength', 12]\n    const parts = /^(.+?)\\((.+)\\)$/.exec(rule);\n    let method = rule;\n    let param = '';\n\n    // 解析带参数的验证如 max_length(12)\n    if (parts) {\n      method = parts[1];\n      param = parts[2];\n    }\n\n    // 如果该规则为 required，并且该值为空，则不验证\n    const jumpRule = !isRequired && isEmpty;\n\n    // 匹配验证\n    if (typeof this[method] === 'function' && !jumpRule) {\n      if (!this[method].apply(this, [field, param])) {\n        result = false;\n      }\n    }\n\n    // 错误信息域\n    error = {\n      id: field.id,\n      name: field.name,\n      value: field.value,\n      rule: method,\n    };\n\n    // 解析错误信息\n    if (!result) {\n      // 错误提示\n      error.message = (() => {\n        const seqText = field.messages ? field.messages.split(/\\s*\\|\\s*/g)[index] : '';\n\n        // 替换 {{value}} 和 {{param}} 为指定值\n        return seqText\n          ? seqText.replace(/\\{\\{\\s*value\\s*}}/g, field.value).replace(/\\{\\{\\s*param\\s*}}/g, param)\n          : seqText;\n      })();\n    }\n  });\n\n  return {\n    result,\n    error,\n  };\n}\n"]}