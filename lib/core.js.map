{"version":3,"sources":["../src/core.js"],"names":["field","id","name","value","result","error","rules","split","isRequired","some","rule","index","ruleLength","parts","exec","method","param","jumpRule","indexOf","apply","Object","assign","message","seqText","messages","replace","length"],"mappings":";;;;;;AAAA;;;;AAEA;;;;;;uDAKe,iBAAgBA,KAAhB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,cADK,GACeD,KADf,CACLC,EADK,EACDC,IADC,GACeF,KADf,CACDE,IADC,EACKC,KADL,GACeH,KADf,CACKG,KADL;AAEb;;AACIC,kBAHS,GAGA,IAHA;AAIb;;AACMC,iBALO,GAKC;AACZJ,oBADY;AAEZC,wBAFY;AAGZC;AAHY,aALD;AAWPG,iBAXO,GAWCN,MAAMM,KAAN,CAAYC,KAAZ,CAAkB,WAAlB,CAXD;AAaPC,sBAbO,GAaMF,MAAMG,IAAN,CAAW;AAAA,qBAAQC,SAAS,UAAjB;AAAA,aAAX,CAbN;AAAA,2DAeJC,KAfI,EAeOC,UAfP;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBLF,0BAhBK,GAgBEJ,MAAMK,KAAN,CAhBF;AAiBX;;AAjBW,0BAkBNP,MAlBM;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAsBX;AACMS,2BAvBK,GAuBG,kBAAkBC,IAAlB,CAAuBJ,IAAvB,CAvBH;AAwBPK,4BAxBO,GAwBEL,IAxBF;AAyBPM,2BAzBO,GAyBC,EAzBD;;AA2BX;;AACA,0BAAIH,KAAJ,EAAW;AACTE,iCAASF,MAAM,CAAN,CAAT;AACAG,gCAAQH,MAAM,CAAN,CAAR;AACD;;AAED;AACMI,8BAlCK,GAkCM,CAACT,UAAD,IAAe,mBAAQL,KAAR,CAAf,IAAiCY,OAAOG,OAAP,CAAe,UAAf,MAA+B,CAlCtE;;AAoCX;;AApCW,4BAqCP,OAAO,MAAKH,MAAL,CAAP,KAAwB,UAAxB,IAAsC,CAACE,QArChC;AAAA;AAAA;AAAA;;AAAA;AAAA,6BAuCE,MAAKF,MAAL,EAAaI,KAAb,QAAyB,CAACnB,KAAD,EAAQgB,KAAR,CAAzB,CAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwCPZ,+BAAS,KAAT;;AAxCO;;AA4CX;AACA,0BAAI,CAACA,MAAL,EAAa;AACXgB,+BAAOC,MAAP,CAAchB,KAAd,EAAqB;AACnBK,gCAAMK,MADa;AAEnBO,mCAAU,YAAM;AACd,gCAAMC,UAAUvB,MAAMwB,QAAN,GAAiBxB,MAAMwB,QAAN,CAAejB,KAAf,CAAqB,WAArB,EAAkCI,KAAlC,CAAjB,GAA4D,EAA5E;AACA;AACA,mCAAOY,UACHA,QAAQE,OAAR,CAAgB,kBAAhB,EAAoCtB,KAApC,EAA2CsB,OAA3C,CAAmD,kBAAnD,EAAuET,KAAvE,CADG,GAEHO,OAFJ;AAGD,2BANQ;AAFU,yBAArB;AAUD;;AAxDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeJZ,iBAfI,GAeI,CAfJ,EAeOC,UAfP,GAeoBN,MAAMoB,MAf1B;;AAAA;AAAA,kBAekCf,QAAQC,UAf1C;AAAA;AAAA;AAAA;;AAAA,iDAeJD,KAfI,EAeOC,UAfP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAesDD,qBAAS,CAf/D;AAAA;AAAA;;AAAA;AAAA,8CA2DN;AACLP,4BADK;AAELC;AAFK,aA3DM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"core.js","sourcesContent":["import { isEmpty } from './util';\n\n/**\n * 通过 field 验证\n * @param  {Object} field 验证信息域\n * @return {Object} 包含结果、错误信息\n */\nexport default async function (field) {\n  const { id, name, value } = field;\n  // 成功标识\n  let result = true;\n  // 错误信息域\n  const error = {\n    id,\n    name,\n    value,\n  };\n\n  const rules = field.rules.split(/\\s*\\|\\s*/g);\n\n  const isRequired = rules.some(rule => rule === 'required');\n\n  for (let index = 0, ruleLength = rules.length; index < ruleLength; index += 1) {\n    const rule = rules[index];\n    // 标识不通过，则不继续验证该规则\n    if (!result) {\n      break;\n    }\n\n    // 转换：maxLength(12) => ['maxLength', 12]\n    const parts = /^(.+?)\\((.+)\\)$/.exec(rule);\n    let method = rule;\n    let param = '';\n\n    // 解析带参数的验证如 maxLength(12)\n    if (parts) {\n      method = parts[1];\n      param = parts[2];\n    }\n\n    // 整体规则中没有 required，并且该值为空，并且不以 required 开头，则不验证\n    const jumpRule = !isRequired && isEmpty(value) && method.indexOf('required') !== 0;\n\n    // 匹配验证\n    if (typeof this[method] === 'function' && !jumpRule) {\n      // eslint-disable-next-line no-await-in-loop\n      if (!await this[method].apply(this, [field, param])) {\n        result = false;\n      }\n    }\n\n    // 验证不通过，解析错误信息\n    if (!result) {\n      Object.assign(error, {\n        rule: method,\n        message: (() => {\n          const seqText = field.messages ? field.messages.split(/\\s*\\|\\s*/g)[index] : '';\n          // 替换 {{value}} 和 {{param}} 中参数\n          return seqText\n            ? seqText.replace(/{{\\s*value\\s*}}/g, value).replace(/{{\\s*param\\s*}}/g, param)\n            : seqText;\n        })(),\n      });\n    }\n  }\n\n  return {\n    result,\n    error,\n  };\n}\n"]}