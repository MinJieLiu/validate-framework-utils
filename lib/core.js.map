{"version":3,"sources":["../src/core.js"],"names":["field","result","error","id","name","value","rules","split","isRequired","some","rule","isEmpty","undefined","forEach","index","parts","exec","method","param","jumpRule","apply","message","seqText","messages","replace"],"mappings":";;;;;;kQAAA;;;;;;;kBAKe,UAAUA,KAAV,EAAiB;AAAA;;AAC9B;AACA,MAAIC,SAAS,IAAb;AACA;AACA,MAAMC,QAAQ;AACZC,QAAIH,MAAMG,EADE;AAEZC,UAAMJ,MAAMI,IAFA;AAGZC,WAAOL,MAAMK;AAHD,GAAd;;AAMA,MAAMC,QAAQN,MAAMM,KAAN,CAAYC,KAAZ,CAAkB,WAAlB,CAAd;;AAEA,MAAMC,aAAaF,MAAMG,IAAN,CAAW;AAAA,WAAQC,SAAS,UAAjB;AAAA,GAAX,CAAnB;AACA,MAAMC,UAAUX,MAAMK,KAAN,KAAgBO,SAAhB,IAA6BZ,MAAMK,KAAN,KAAgB,IAA7C,IAAqDL,MAAMK,KAAN,KAAgB,EAArF;;AAEAC,QAAMO,OAAN,CAAc,UAACH,IAAD,EAAOI,KAAP,EAAiB;AAC7B;AACA,QAAI,CAACb,MAAL,EAAa;AACX;AACD;;AAED;AACA,QAAMc,QAAQ,kBAAkBC,IAAlB,CAAuBN,IAAvB,CAAd;AACA,QAAIO,SAASP,IAAb;AACA,QAAIQ,QAAQ,EAAZ;;AAEA;AACA,QAAIH,KAAJ,EAAW;AACTE,eAASF,MAAM,CAAN,CAAT;AACAG,cAAQH,MAAM,CAAN,CAAR;AACD;;AAED;AACA,QAAMI,WAAW,CAACX,UAAD,IAAeG,OAAhC;;AAEA;AACA,QAAI,OAAO,MAAKM,MAAL,CAAP,KAAwB,UAAxB,IAAsC,CAACE,QAA3C,EAAqD;AACnD,UAAI,CAAC,MAAKF,MAAL,EAAaG,KAAb,QAAyB,CAACpB,KAAD,EAAQkB,KAAR,CAAzB,CAAL,EAA+C;AAC7CjB,iBAAS,KAAT;AACD;AACF;;AAED;AACA,QAAI,CAACA,MAAL,EAAa;AACX,eAAcC,KAAd,EAAqB;AACnBQ,cAAMO,MADa;AAEnBI,iBAAU,YAAM;AACd,cAAMC,UAAUtB,MAAMuB,QAAN,GAAiBvB,MAAMuB,QAAN,CAAehB,KAAf,CAAqB,WAArB,EAAkCO,KAAlC,CAAjB,GAA4D,EAA5E;AACA;AACA,iBAAOQ,UACHA,QAAQE,OAAR,CAAgB,oBAAhB,EAAsCxB,MAAMK,KAA5C,EAAmDmB,OAAnD,CAA2D,oBAA3D,EAAiFN,KAAjF,CADG,GAEHI,OAFJ;AAGD,SANQ;AAFU,OAArB;AAUD;AACF,GAxCD;;AA0CA,SAAO;AACLrB,kBADK;AAELC;AAFK,GAAP;AAID,C","file":"core.js","sourcesContent":["/**\n * 通过 field 验证\n * @param  {Object} field 验证信息域\n * @return {Object} 包含结果、错误信息\n */\nexport default function (field) {\n  // 成功标识\n  let result = true;\n  // 错误信息域\n  const error = {\n    id: field.id,\n    name: field.name,\n    value: field.value,\n  };\n\n  const rules = field.rules.split(/\\s*\\|\\s*/g);\n\n  const isRequired = rules.some(rule => rule === 'required');\n  const isEmpty = field.value === undefined || field.value === null || field.value === '';\n\n  rules.forEach((rule, index) => {\n    // 标识不通过，则不继续验证该规则\n    if (!result) {\n      return;\n    }\n\n    // 转换：maxLength(12) => ['maxLength', 12]\n    const parts = /^(.+?)\\((.+)\\)$/.exec(rule);\n    let method = rule;\n    let param = '';\n\n    // 解析带参数的验证如 maxLength(12)\n    if (parts) {\n      method = parts[1];\n      param = parts[2];\n    }\n\n    // 信息域规则中没有包含 required，并且该值为空，则不验证\n    const jumpRule = !isRequired && isEmpty;\n\n    // 匹配验证\n    if (typeof this[method] === 'function' && !jumpRule) {\n      if (!this[method].apply(this, [field, param])) {\n        result = false;\n      }\n    }\n\n    // 验证不通过，解析错误信息\n    if (!result) {\n      Object.assign(error, {\n        rule: method,\n        message: (() => {\n          const seqText = field.messages ? field.messages.split(/\\s*\\|\\s*/g)[index] : '';\n          // 替换 {{value}} 和 {{param}} 中参数\n          return seqText\n            ? seqText.replace(/\\{\\{\\s*value\\s*}}/g, field.value).replace(/\\{\\{\\s*param\\s*}}/g, param)\n            : seqText;\n        })(),\n      });\n    }\n  });\n\n  return {\n    result,\n    error,\n  };\n}\n"]}