{"version":3,"sources":["../src/core.js"],"names":["field","id","name","rules","split","isRequired","some","rule","value","result","error","index","ruleLength","length","parts","exec","method","param","jumpRule","indexOf","currentMethod","currentResult","apply","seqText","messages","message","replace","Boolean"],"mappings":";;;;;;kBAOe,UAAUA,KAAV,EAAiB;AAAA;;AAC9B;AAD8B,MAEtBC,EAFsB,GAETD,KAFS,CAEtBC,EAFsB;AAAA,MAElBC,IAFkB,GAETF,KAFS,CAElBE,IAFkB;;AAG9B,MAAMC,QAAQH,MAAMG,KAAN,CAAYC,KAAZ,CAAkB,WAAlB,CAAd;AACA,MAAMC,aAAaF,MAAMG,IAAN,CAAW;AAAA,WAAQC,SAAS,UAAjB;AAAA,GAAX,CAAnB;;AAEA;AAAA,yDAAO,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACIC,oBAFC,GAEQ,IAFR;AAGL;;AACMC,mBAJD,GAIS;AACZT,sBADY;AAEZC,0BAFY;AAGZM;AAHY,eAJT;;;AAULR,oBAAMQ,KAAN,GAAcA,KAAd,CAVK,CAUgB;;AAEZG,mBAZJ,GAYY,CAZZ,EAYeC,UAZf,GAY4BT,MAAMU,MAZlC;;AAAA;AAAA,oBAY0CF,QAAQC,UAZlD;AAAA;AAAA;AAAA;;AAaGL,kBAbH,GAaUJ,MAAMQ,KAAN,CAbV;AAcH;;AAdG,kBAeEF,MAfF;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAmBH;AACMK,mBApBH,GAoBW,kBAAkBC,IAAlB,CAAuBR,IAAvB,CApBX;AAqBCS,oBArBD,GAqBUT,IArBV;AAsBCU,mBAtBD;;AAwBH;;AACA,kBAAIH,KAAJ,EAAW;AACTE,yBAASF,MAAM,CAAN,CAAT;AACAG,wBAAQH,MAAM,CAAN,CAAR;AACD;;AAED;AACMI,sBA/BH,GA+Bc,CAACb,UAAD,IAAe,mBAAQG,KAAR,CAAf,IAAiCQ,OAAOG,OAAP,CAAe,UAAf,MAA+B,CA/B9E;;AAiCH;;AACMC,2BAlCH,GAkCmB,MAAKJ,MAAL,CAlCnB;AAmCH;;AAnCG,oBAoCC,OAAOI,aAAP,KAAyB,UAAzB,IAAuC,CAACF,QApCzC;AAAA;AAAA;AAAA;;AAqCD;AACMG,2BAtCL,GAsCqBD,cAAcE,KAAd,QAA0B,CAACtB,KAAD,EAAQiB,KAAR,CAA1B,CAtCrB;AAuCD;;AAvCC,mBAwCG,qBAAUI,aAAV,CAxCH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA0CgBA,aA1ChB;;AAAA;AA0CCZ,oBA1CD;AAAA;AAAA;;AAAA;AA4CCA,uBAASY,aAAT;;AA5CD;;AAgDH;AACA,kBAAI,CAACZ,MAAL,EAAa;AACX;AACAC,sBAAMH,IAAN,GAAaS,MAAb;;AAEA;AACMO,uBALK,GAKKvB,MAAMwB,QAAN,GAAiBxB,MAAMwB,QAAN,CAAepB,KAAf,CAAqB,WAArB,EAAkCO,KAAlC,CAAjB,GAA4D,EALjE;;AAMXD,sBAAMe,OAAN,GAAgBF,UACZA,QAAQG,OAAR,CAAgB,kBAAhB,EAAoClB,KAApC,EAA2CkB,OAA3C,CAAmD,kBAAnD,EAAuET,KAAvE,CADY,GAEZM,OAFJ;AAGD;;AA1DE;AAY8DZ,uBAAS,CAZvE;AAAA;AAAA;;AAAA;AAAA,+CA6DE;AACLF,wBAAQkB,QAAQlB,MAAR,CADH;AAELC;AAFK,eA7DF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkED,C;;AA/ED;;;;AAEA","file":"core.js","sourcesContent":["import { isEmpty, isPromise } from './util';\n\n/**\n * 通过 field 验证\n * @param  {Object} field 验证信息域\n * @return {Function} 可通过 value 验证：包含结果、错误信息\n */\nexport default function (field) {\n  // Variables\n  const { id, name } = field;\n  const rules = field.rules.split(/\\s*\\|\\s*/g);\n  const isRequired = rules.some(rule => rule === 'required');\n\n  return async (value) => {\n    // 成功标识\n    let result = true;\n    // 错误信息域\n    const error = {\n      id,\n      name,\n      value,\n    };\n\n    field.value = value; // eslint-disable-line no-param-reassign\n\n    for (let index = 0, ruleLength = rules.length; index < ruleLength; index += 1) {\n      const rule = rules[index];\n      // 标识不通过，则不继续验证该规则\n      if (!result) {\n        break;\n      }\n\n      // 转换：maxLength(12) => ['maxLength', 12]\n      const parts = /^(.+?)\\((.+)\\)$/.exec(rule);\n      let method = rule;\n      let param;\n\n      // 解析带参数的验证如 maxLength(12)\n      if (parts) {\n        method = parts[1];\n        param = parts[2];\n      }\n\n      // 整体规则中没有 required，并且该值为空，并且不以 required 开头，则不验证\n      const jumpRule = !isRequired && isEmpty(value) && method.indexOf('required') !== 0;\n\n      // 当前方法\n      const currentMethod = this[method];\n      // 匹配验证\n      if (typeof currentMethod === 'function' && !jumpRule) {\n        // Validate\n        const currentResult = currentMethod.apply(this, [field, param]);\n        // 异步\n        if (isPromise(currentResult)) {\n          // eslint-disable-next-line no-await-in-loop\n          result = await currentResult;\n        } else {\n          result = currentResult;\n        }\n      }\n\n      // 验证不通过，则解析错误信息\n      if (!result) {\n        // 当前验证不通过的规则\n        error.rule = method;\n\n        // 替换 {{value}} 和 {{param}} 中参数\n        const seqText = field.messages ? field.messages.split(/\\s*\\|\\s*/g)[index] : '';\n        error.message = seqText\n          ? seqText.replace(/{{\\s*value\\s*}}/g, value).replace(/{{\\s*param\\s*}}/g, param)\n          : seqText;\n      }\n    }\n\n    return {\n      result: Boolean(result),\n      error,\n    };\n  };\n}\n"]}