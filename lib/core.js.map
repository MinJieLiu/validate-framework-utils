{"version":3,"sources":["../src/core.js"],"names":["field","result","error","id","name","value","rules","split","isRequired","some","rule","isEmpty","undefined","index","ruleLength","parts","exec","method","param","jumpRule","indexOf","apply","Object","assign","message","seqText","messages","replace","length"],"mappings":";;;;;;;;AAAA;;;;;;uDAKe,iBAAgBA,KAAhB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACb;AACIC,kBAFS,GAEA,IAFA;AAGb;;AACMC,iBAJO,GAIC;AACZC,kBAAIH,MAAMG,EADE;AAEZC,oBAAMJ,MAAMI,IAFA;AAGZC,qBAAOL,MAAMK;AAHD,aAJD;AAUPC,iBAVO,GAUCN,MAAMM,KAAN,CAAYC,KAAZ,CAAkB,WAAlB,CAVD;AAYPC,sBAZO,GAYMF,MAAMG,IAAN,CAAW;AAAA,qBAAQC,SAAS,UAAjB;AAAA,aAAX,CAZN;AAaPC,mBAbO,GAaGX,MAAMK,KAAN,KAAgBO,SAAhB,IAA6BZ,MAAMK,KAAN,KAAgB,IAA7C,IAAqDL,MAAMK,KAAN,KAAgB,EAbxE;AAAA,2DAeJQ,KAfI,EAeOC,UAfP;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBLJ,0BAhBK,GAgBEJ,MAAMO,KAAN,CAhBF;AAiBX;;AAjBW,0BAkBNZ,MAlBM;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAsBX;AACMc,2BAvBK,GAuBG,kBAAkBC,IAAlB,CAAuBN,IAAvB,CAvBH;AAwBPO,4BAxBO,GAwBEP,IAxBF;AAyBPQ,2BAzBO,GAyBC,EAzBD;;AA2BX;;AACA,0BAAIH,KAAJ,EAAW;AACTE,iCAASF,MAAM,CAAN,CAAT;AACAG,gCAAQH,MAAM,CAAN,CAAR;AACD;;AAED;AACMI,8BAlCK,GAkCM,CAACX,UAAD,IAAeG,OAAf,IAA0BM,OAAOG,OAAP,CAAe,UAAf,MAA+B,CAlC/D;;AAoCX;;AApCW,4BAqCP,OAAO,MAAKH,MAAL,CAAP,KAAwB,UAAxB,IAAsC,CAACE,QArChC;AAAA;AAAA;AAAA;;AAAA;AAAA,6BAuCE,MAAKF,MAAL,EAAaI,KAAb,QAAyB,CAACrB,KAAD,EAAQkB,KAAR,CAAzB,CAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwCPjB,+BAAS,KAAT;;AAxCO;;AA4CX;AACA,0BAAI,CAACA,MAAL,EAAa;AACXqB,+BAAOC,MAAP,CAAcrB,KAAd,EAAqB;AACnBQ,gCAAMO,MADa;AAEnBO,mCAAU,YAAM;AACd,gCAAMC,UAAUzB,MAAM0B,QAAN,GAAiB1B,MAAM0B,QAAN,CAAenB,KAAf,CAAqB,WAArB,EAAkCM,KAAlC,CAAjB,GAA4D,EAA5E;AACA;AACA,mCAAOY,UACHA,QAAQE,OAAR,CAAgB,kBAAhB,EAAoC3B,MAAMK,KAA1C,EAAiDsB,OAAjD,CAAyD,kBAAzD,EAA6ET,KAA7E,CADG,GAEHO,OAFJ;AAGD,2BANQ;AAFU,yBAArB;AAUD;;AAxDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeJZ,iBAfI,GAeI,CAfJ,EAeOC,UAfP,GAeoBR,MAAMsB,MAf1B;;AAAA;AAAA,kBAekCf,QAAQC,UAf1C;AAAA;AAAA;AAAA;;AAAA,iDAeJD,KAfI,EAeOC,UAfP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAesDD,qBAAS,CAf/D;AAAA;AAAA;;AAAA;AAAA,8CA2DN;AACLZ,4BADK;AAELC;AAFK,aA3DM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"core.js","sourcesContent":["/**\n * 通过 field 验证\n * @param  {Object} field 验证信息域\n * @return {Object} 包含结果、错误信息\n */\nexport default async function (field) {\n  // 成功标识\n  let result = true;\n  // 错误信息域\n  const error = {\n    id: field.id,\n    name: field.name,\n    value: field.value,\n  };\n\n  const rules = field.rules.split(/\\s*\\|\\s*/g);\n\n  const isRequired = rules.some(rule => rule === 'required');\n  const isEmpty = field.value === undefined || field.value === null || field.value === '';\n\n  for (let index = 0, ruleLength = rules.length; index < ruleLength; index += 1) {\n    const rule = rules[index];\n    // 标识不通过，则不继续验证该规则\n    if (!result) {\n      break;\n    }\n\n    // 转换：maxLength(12) => ['maxLength', 12]\n    const parts = /^(.+?)\\((.+)\\)$/.exec(rule);\n    let method = rule;\n    let param = '';\n\n    // 解析带参数的验证如 maxLength(12)\n    if (parts) {\n      method = parts[1];\n      param = parts[2];\n    }\n\n    // 整体规则中没有 required，并且该值为空，并且不以 required 开头，则不验证\n    const jumpRule = !isRequired && isEmpty && method.indexOf('required') !== 0;\n\n    // 匹配验证\n    if (typeof this[method] === 'function' && !jumpRule) {\n      // eslint-disable-next-line no-await-in-loop\n      if (!await this[method].apply(this, [field, param])) {\n        result = false;\n      }\n    }\n\n    // 验证不通过，解析错误信息\n    if (!result) {\n      Object.assign(error, {\n        rule: method,\n        message: (() => {\n          const seqText = field.messages ? field.messages.split(/\\s*\\|\\s*/g)[index] : '';\n          // 替换 {{value}} 和 {{param}} 中参数\n          return seqText\n            ? seqText.replace(/{{\\s*value\\s*}}/g, field.value).replace(/{{\\s*param\\s*}}/g, param)\n            : seqText;\n        })(),\n      });\n    }\n  }\n\n  return {\n    result,\n    error,\n  };\n}\n"]}