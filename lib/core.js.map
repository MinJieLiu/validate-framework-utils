{"version":3,"sources":["../src/core.js"],"names":["field","id","name","rules","split","isRequired","some","rule","value","result","executedAsyncFunction","error","Object","assign","index","ruleLength","length","parts","exec","method","param","jumpRule","indexOf","currentMethod","currentResult","apply","then","seqText","messages","message","replace"],"mappings":";;;;;;;;kBAOe,UAAUA,KAAV,EAAiB;AAAA;;AAC9B;AAD8B,MAEtBC,EAFsB,GAETD,KAFS,CAEtBC,EAFsB;AAAA,MAElBC,IAFkB,GAETF,KAFS,CAElBE,IAFkB;;AAG9B,MAAMC,QAAQH,MAAMG,KAAN,CAAYC,KAAZ,CAAkB,WAAlB,CAAd;AACA,MAAMC,aAAaF,MAAMG,IAAN,CAAW;AAAA,WAAQC,SAAS,UAAjB;AAAA,GAAX,CAAnB;;AAEA;AAAA,yDAAO,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACIC,oBAFC,GAEQ,IAFR;AAGL;;AACIC,mCAJC,GAIuB,KAJvB;AAKL;;AACMC,mBAND,GAMS;AACZV,sBADY;AAEZC,0BAFY;AAGZM;AAHY,eANT;AAWL;;AACAI,qBAAOC,MAAP,CAAcb,KAAd,EAAqB,EAAEQ,YAAF,EAArB;;AAESM,mBAdJ,GAcY,CAdZ,EAceC,UAdf,GAc4BZ,MAAMa,MAdlC;;AAAA;AAAA,oBAc0CF,QAAQC,UAdlD;AAAA;AAAA;AAAA;;AAeGR,kBAfH,GAeUJ,MAAMW,KAAN,CAfV;AAgBH;;AAhBG,kBAiBEL,MAjBF;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAqBH;AACMQ,mBAtBH,GAsBW,kBAAkBC,IAAlB,CAAuBX,IAAvB,CAtBX;AAuBCY,oBAvBD,GAuBUZ,IAvBV;AAwBCa,mBAxBD;;AA0BH;;AACA,kBAAIH,KAAJ,EAAW;AACTE,yBAASF,MAAM,CAAN,CAAT;AACAG,wBAAQH,MAAM,CAAN,CAAR;AACD;;AAED;AACMI,sBAjCH,GAiCc,CAAChB,UAAD,IAAe,mBAAQG,KAAR,CAAf,IAAiCW,OAAOG,OAAP,CAAe,UAAf,MAA+B,CAjC9E;;AAmCH;;AACMC,2BApCH,GAoCmB,MAAKJ,MAAL,CApCnB;AAqCH;;AArCG,oBAsCC,OAAOI,aAAP,KAAyB,UAAzB,IAAuC,CAACF,QAtCzC;AAAA;AAAA;AAAA;;AAuCD;AACMG,2BAxCL,GAwCqBD,cAAcE,KAAd,QAA0B,CAACzB,KAAD,EAAQoB,KAAR,CAA1B,CAxCrB;AAyCD;AACA;;AA1CC,oBA2CG,QAAOI,aAAP,yCAAOA,aAAP,OAAyB,QAAzB,IAAqCA,cAAcE,IA3CtD;AAAA;AAAA;AAAA;;AA4CChB,sCAAwB,IAAxB;AACA;AA7CD;AAAA,qBA8CgBc,aA9ChB;;AAAA;AA8CCf,oBA9CD;AAAA;AAAA;;AAAA;AAgDCA,uBAASe,aAAT;;AAhDD;;AAoDH;AACA,kBAAI,CAACf,MAAL,EAAa;AACX;AACAE,sBAAMJ,IAAN,GAAaY,MAAb;;AAEA;AACMQ,uBALK,GAKK3B,MAAM4B,QAAN,GAAiB5B,MAAM4B,QAAN,CAAexB,KAAf,CAAqB,WAArB,EAAkCU,KAAlC,CAAjB,GAA4D,EALjE;;AAMXH,sBAAMkB,OAAN,GAAgBF,UACZA,QAAQG,OAAR,CAAgB,kBAAhB,EAAoCtB,KAApC,EAA2CsB,OAA3C,CAAmD,kBAAnD,EAAuEV,KAAvE,CADY,GAEZO,OAFJ;AAGD;;AA9DE;AAc8Db,uBAAS,CAdvE;AAAA;AAAA;;AAAA;AAAA,+CAiEE;AACLL,8BADK;AAELE,4BAFK;AAGLD;AAHK,eAjEF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAuED,C;;AApFD;;;;AAEA","file":"core.js","sourcesContent":["import { isEmpty } from './util';\n\n/**\n * 通过 field 验证\n * @param  {Object} field 验证信息域\n * @return {Function} 可通过 value 验证：包含结果、错误信息\n */\nexport default function (field) {\n  // Variables\n  const { id, name } = field;\n  const rules = field.rules.split(/\\s*\\|\\s*/g);\n  const isRequired = rules.some(rule => rule === 'required');\n\n  return async (value) => {\n    // 成功标识\n    let result = true;\n    // 是否执行过异步方法\n    let executedAsyncFunction = false;\n    // 错误信息域\n    const error = {\n      id,\n      name,\n      value,\n    };\n    // Assign value to field\n    Object.assign(field, { value });\n\n    for (let index = 0, ruleLength = rules.length; index < ruleLength; index += 1) {\n      const rule = rules[index];\n      // 标识不通过，则不继续验证该规则\n      if (!result) {\n        break;\n      }\n\n      // 转换：maxLength(12) => ['maxLength', 12]\n      const parts = /^(.+?)\\((.+)\\)$/.exec(rule);\n      let method = rule;\n      let param;\n\n      // 解析带参数的验证如 maxLength(12)\n      if (parts) {\n        method = parts[1];\n        param = parts[2];\n      }\n\n      // 整体规则中没有 required，并且该值为空，并且不以 required 开头，则不验证\n      const jumpRule = !isRequired && isEmpty(value) && method.indexOf('required') !== 0;\n\n      // 当前方法\n      const currentMethod = this[method];\n      // 匹配验证\n      if (typeof currentMethod === 'function' && !jumpRule) {\n        // Validate\n        const currentResult = currentMethod.apply(this, [field, param]);\n        // 异步方法\n        // babel 中无法使用该判断: Object.getPrototypeOf(currentMethod).constructor.name === 'AsyncFunction'\n        if (typeof currentResult === 'object' && currentResult.then) {\n          executedAsyncFunction = true;\n          // eslint-disable-next-line no-await-in-loop\n          result = await currentResult;\n        } else {\n          result = currentResult;\n        }\n      }\n\n      // 验证不通过，则解析错误信息\n      if (!result) {\n        // 当前验证不通过的规则\n        error.rule = method;\n\n        // 替换 {{value}} 和 {{param}} 中参数\n        const seqText = field.messages ? field.messages.split(/\\s*\\|\\s*/g)[index] : '';\n        error.message = seqText\n          ? seqText.replace(/{{\\s*value\\s*}}/g, value).replace(/{{\\s*param\\s*}}/g, param)\n          : seqText;\n      }\n    }\n\n    return {\n      result,\n      error,\n      executedAsyncFunction,\n    };\n  };\n}\n"]}